import TextField from "@mui/material/TextField";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import DialogTitle from "@mui/material/DialogTitle";
import InputLabel from "@mui/material/InputLabel";
import FormControl from "@mui/material/FormControl";
import { useSelector, useDispatch } from "react-redux";
import * as pentestAction from "../../Redux/Pentest/actions/pentestActions";
import DarkGrayButton from "../Common/DarkGrayButton";
import GrayButton from "../Common/GrayButton";
export default function ScopeAddForm() {
  const dispatch = useDispatch();
  const state = useSelector((state) => state);

  const {
    isScopeModalOpen,
    scopeFormInput: { scopeTitle, scopeStatus },
    isScopeEdit,
  } = state.pentestReducer;

  return (
    <div>
      <Dialog
        open={isScopeModalOpen}
        onClose={() => dispatch(pentestAction.closeScopeModal())}
      >
        <div className="py-4 px-4 w-full md:w-500">
          <DialogTitle sx={{ textAlign: "center" }}>
            {isScopeEdit ? "Edit Scope" : "New Scope"}
          </DialogTitle>
          <DialogContent>
            <div>
              <TextField
                autoFocus
                margin="dense"
                id="scopeTitle"
                type="text"
                label="Scope Title"
                fullWidth
                variant="outlined"
                name="scopeTitle"
                value={scopeTitle}
                onChange={(e) => dispatch(pentestAction.scopeInputChnage(e))}
              />
            </div>
            <div className="mt-4 w-full">
              <FormControl fullWidth>
                <InputLabel id="ScopeStatus">Status</InputLabel>
                <Select
                  labelId="ScopeStatus"
                  id="ScopeStatus"
                  label="Status"
                  name="scopeStatus"
                  sx={{ width: "100%" }}
                  value={scopeStatus}
                  onChange={(e) => dispatch(pentestAction.scopeInputChnage(e))}
                >
                  <MenuItem value={"In Progress"}>In Progress</MenuItem>
                  <MenuItem value={"Not started"}>Not started</MenuItem>
                  <MenuItem value={"Blocked and N/A"}>Blocked and N/A</MenuItem>
                </Select>
              </FormControl>
            </div>

            <DialogActions
              sx={{
                mt: "1rem",
                ml: 0,
                display: "flex",
                p: 0,
                justifyContent: "space-between",
              }}
            >
              <DarkGrayButton>{isScopeEdit ? "Save" : "Add"}</DarkGrayButton>
              <GrayButton
                onClick={() => dispatch(pentestAction.closeScopeModal())}
              >
                cancel
              </GrayButton>
            </DialogActions>
          </DialogContent>
        </div>
      </Dialog>
    </div>
  );
}
