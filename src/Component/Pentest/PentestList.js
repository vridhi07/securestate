import { useState, useEffect } from "react";
import DarkButton from "../Common/DarkButton";
import AddPentestModal from "./AddPentestModal";
import PentestListItem from "./PentestListItem";
import CompletedListItem from "./CompletedListItem";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import PentestLoader from "../../Component/Common/PentestLoader";
import * as action from "../../Redux/action";
import { useDispatch, useSelector } from "react-redux";
import { data } from "autoprefixer";

const PentestList = () => {
  const [addPentest, setAddPentest] = useState(false);
  const [activePageNumber, setActivePageNumber] = useState(1);
  const [upcomingPageNumber, setUpcomingPageNumber] = useState(1);
  const [completedPageNumber, setCompletedPageNumber] = useState(1);
  const loading = false;
  const dispatch = useDispatch();
  const [pentest, setPentest] = useState({
    title: "",
    asset: "",
    startDate: new Date(),
    endDate: new Date(),
    status: "",
    testingEnvironment: "",
    clientPoc: "",
    clientEmail: "",
    scope: "",
  });
  const handleClose = () => {
    setAddPentest(false);
  };

  const handlePentestChange = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    setPentest({ ...pentest, [name]: value });
  };
  const handleStartDate = (newValue) => {
    setPentest({ ...pentest, startDate: newValue });
  };

  const handleEndDate = (newValue) => {
    setPentest({ ...pentest, endDate: newValue });
  };

  const handleActivePageNumber = (e, i) => {
    console.log(i);
    setActivePageNumber(i);
  };
  const handleUpcomingPageNumber = (e, i) => {
    console.log(i);
    setUpcomingPageNumber(i);
  };
  const handleCompletedPageNumber = (e, i) => {
    console.log(i);
    setCompletedPageNumber(i);
  };

  const state = useSelector((state) => state);
  const { activePentestData, isActiveLoading } = state?.activePentest;

  useEffect(() => {
    dispatch(action.ActivePentestRequest(activePageNumber));
  }, [activePageNumber]);

  return (
    <>
      <div className="flex justify-center flex-col w-full xl:w-5/6 mx-auto">
        <div className="flex flex-col sm:flex-row justify-between w-full items-center mt-20">
          <span className="text-gray-600 font-medium text-xl">
            ACTIVE PENTESTS
          </span>
          <DarkButton
            onClick={() => setAddPentest(true)}
            text={"New Pentest"}
          />
        </div>
        <div>
          {isActiveLoading ? (
            <PentestLoader />
          ) : (
            <div>
              {activePentestData.data &&
                activePentestData?.data.map((item) => (
                  <PentestListItem key={item._id} pentest={item} />
                ))}
              <div className="mt-3">
                <Stack spacing={2}>
                  <Pagination
                    count={activePentestData?.total}
                    variant="outlined"
                    onChange={handleActivePageNumber}
                    color="primary"
                    page={activePageNumber}
                  />
                </Stack>
              </div>
            </div>
          )}
        </div>

        {/* <span className="text-gray-600 font-medium text-xl mt-20">
          UPCOMING PENTESTS
        </span>
        <div>
          {[1, 2, 3].map((value, index) => (
            <PentestListItem key={index} index={index} />
          ))}
          <div className="mt-3">
            <Stack spacing={2}>
              <Pagination
                count={10}
                variant="outlined"
                onChange={handleUpcomingPageNumber}
                color="primary"
                page={upcomingPageNumber}
              />
            </Stack>
          </div>
        </div> */}

        {/* <span className="text-gray-600 font-medium text-xl mt-20">
          COMPLETED PENTESTS
        </span>
        <div>
          {[1, 2, 3].map((value, index) => (
            <CompletedListItem key={index} index={index} />
          ))}
        </div>
        <div className="mt-3 mb-3">
          <Stack spacing={2}>
            <Pagination
              count={10}
              variant="outlined"
              color="primary"
              page={completedPageNumber}
              onChange={handleCompletedPageNumber}
            />
          </Stack>
        </div> */}
      </div>
      <AddPentestModal
        addPentest={addPentest}
        pentest={pentest}
        handleClose={handleClose}
        handlePentestChange={handlePentestChange}
        handleStartDate={handleStartDate}
        handleEndDate={handleEndDate}
      />
    </>
  );
};

export default PentestList;
