import { useState, useEffect } from "react";

import AddPentestModal from "./AddPentestModal";
import ActivePentestLIstItem from "./ActivePentestLIstItem";
import UpcomingPenttestListItem from "./UpcomingPentestListItem";
import CompletedListItem from "./CompletedListItem";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import PentestLoader from "../../Component/Common/PentestLoader";
import * as action from "../../Redux/action";
import { useDispatch, useSelector } from "react-redux";

const PentestList = () => {
  // States
  const [addPentest, setAddPentest] = useState(false);
  const [activePageNumber, setActivePageNumber] = useState(1);
  const [upcomingPageNumber, setUpcomingPageNumber] = useState(1);
  const [completedPageNumber, setCompletedPageNumber] = useState(1);
  const [isEdit, setIsEdit] = useState(false);
  const [selectedId, setSelectedId] = useState(null);
  const [statusType, setStatusType] = useState("");
  const [anchorEl, setAnchorEl] = useState(null);
  const dispatch = useDispatch();
  const [pentest, setPentest] = useState({
    title: "",
    asset: "",
    startDate: new Date(),
    endDate: new Date(),
    status: "",
    testingEnvironment: "",
    clientPoc: "",
    clientEmail: "",
    scope: "",
  });
  // *redux state
  const state = useSelector((state) => state);
  const { activePentestData, isActiveLoading, ActivePentestMessage } =
    state?.activePentest;
  const { UpcomingPentestData, isUpcomingLoading, UpcomingPentestMessage } =
    state?.UpcomingPentest;
  const { completedPentestData, isCompletedLoading, CompletedMessage } =
    state?.CompletedPentest;
  const { selectedCompany } = state?.company;
  const { userDetails } = state?.user;
  // * Functions
  const company_id = selectedCompany
    ? selectedCompany
    : userDetails?.company_id?._id;
  // console.log(company_id);
  const handleClose = () => {
    setAddPentest(false);
    setIsEdit(false);
  };

  const handlePentestChange = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    setPentest({ ...pentest, [name]: value });
  };
  const handleStartDate = (newValue) => {
    setPentest({ ...pentest, startDate: newValue });
  };

  const handleEndDate = (newValue) => {
    setPentest({ ...pentest, endDate: newValue });
  };

  const handleActivePageNumber = (e, i) => {
    setActivePageNumber(i);
  };
  const handleUpcomingPageNumber = (e, i) => {
    setUpcomingPageNumber(i);
  };
  const handleCompletedPageNumber = (e, i) => {
    setCompletedPageNumber(i);
  };

  const openMenuButton = (e, id, type) => {
    setAnchorEl(e.currentTarget);
    setSelectedId(id);
    setStatusType(type);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleEdit = () => {
    setAddPentest(true);
    setIsEdit(true);
    handleMenuClose();
    if (statusType === "active") {
      const SingleActiveAsset = activePentestData?.data.find(
        (item) => item._id === selectedId
      );
      console.log(SingleActiveAsset);
      setPentest({
        ...pentest,
        title: SingleActiveAsset.asset,
        asset: SingleActiveAsset.client_email,
        startDate: SingleActiveAsset.start_date,
        endDate: SingleActiveAsset.end_date,
        status: SingleActiveAsset.statu,
        testingEnvironment: SingleActiveAsset.testing_env,
        clientPoc: SingleActiveAsset.client_poc,
        clientEmail: SingleActiveAsset.client_email,
        scope: "",
      });
    }
    if (statusType === "upcoming") {
      console.log("upcoming");
    }
  };

  const handlePentestSubmit = (e) => {
    e.preventDefault();
    const {
      title,
      asset,
      startDate,
      endDate,
      status,
      testingEnvironment,
      clientPoc,
      clientEmail,
      scope,
    } = pentest;
    if (!isEdit) {
      const data = {
        title,
        asset,
        start_date: startDate,
        end_date: endDate,
        testing_env: testingEnvironment,
        client_poc: clientPoc,
        client_email: clientEmail,
        company_id,
        scope,
        status,
      };
      console.log(data);
      dispatch(action.AddPentestRequest(data));
    }
    setAddPentest(false);
  };

  const handleDelete = () => {
    dispatch(action.DeletePentestRequest(selectedId));
  };
  useEffect(() => {
    dispatch(action.ActivePentestRequest({ company_id, activePageNumber }));
  }, [activePageNumber, ActivePentestMessage, company_id]);

  useEffect(() => {
    dispatch(action.UpcomingPentestRequest({ company_id, upcomingPageNumber }));
  }, [upcomingPageNumber, UpcomingPentestMessage, company_id]);

  useEffect(() => {
    dispatch(
      action.CompletedPentestRequest({ company_id, completedPageNumber })
    );
  }, [completedPageNumber, CompletedMessage, company_id]);

  return (
    <>
      <div className="flex justify-center flex-col w-full xl:w-5/6 mx-auto">
        <div className="flex flex-col sm:flex-row justify-between w-full items-center mt-20">
          <span className="text-gray-600 font-medium text-xl">
            ACTIVE PENTESTS
          </span>
          <div>
            <button
              onClick={() => setAddPentest(true)}
              text={"New Pentest"}
              className={`bg-gray-cus tracking-wide  text-gray-300 py-2 px-8 capitalize rounded-sm  `}
            >
              New Pentest
            </button>
          </div>
        </div>
        <div>
          {isActiveLoading ? (
            <PentestLoader />
          ) : (
            <div>
              <div className="flex justify-between items-center py-3 ">
                <div className="grid grid-cols-12 gap-x-14 justify-between items-center ">
                  <span className="text-orange-cus-1 text-xl font-medium col-span-3 text-center">
                    Pentest Title
                  </span>
                  <span className="text-orange-cus-1 text-base col-span-3 text-center">
                    StartDate
                  </span>
                  <span className="text-orange-cus-1 text-base col-span-3 text-center">
                    End Date
                  </span>
                  <span className="text-orange-cus-1 font-semibold text-lg col-span-3 text-center ">
                    Asset
                  </span>
                </div>
                <div></div>
              </div>
              {activePentestData.data &&
                activePentestData?.data.map((item) => (
                  <ActivePentestLIstItem
                    key={item._id}
                    pentest={item}
                    openMenuButton={openMenuButton}
                    handleMenuClose={handleMenuClose}
                    anchorEl={anchorEl}
                    handleEdit={handleEdit}
                    handleDelete={handleDelete}
                  />
                ))}
              <div className="mt-3">
                {activePentestData?.total > 1 && (
                  <Stack spacing={2}>
                    <Pagination
                      count={activePentestData?.total}
                      variant="outlined"
                      onChange={handleActivePageNumber}
                      color="primary"
                      page={activePageNumber}
                    />
                  </Stack>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="text-gray-600 font-medium text-xl mt-20">
          UPCOMING PENTESTS
        </div>
        <div>
          {isUpcomingLoading ? (
            <PentestLoader />
          ) : (
            <div>
              <div>
                <div className="flex justify-between items-center py-3 ">
                  <div className="grid grid-cols-12 gap-x-14 justify-between items-center ">
                    <span className="text-orange-cus-1 text-xl font-medium col-span-3 text-center">
                      Pentest Title
                    </span>
                    <span className="text-orange-cus-1 text-base col-span-3 text-center">
                      StartDate
                    </span>
                    <span className="text-orange-cus-1 text-base col-span-3 text-center">
                      End Date
                    </span>
                    <span className="text-orange-cus-1 font-semibold text-lg col-span-3 text-center ">
                      Asset
                    </span>
                  </div>
                  <div></div>
                </div>
                {UpcomingPentestData?.data &&
                  UpcomingPentestData?.data.map((item) => (
                    <UpcomingPenttestListItem
                      key={item._id}
                      pentest={item}
                      openMenuButton={openMenuButton}
                      handleMenuClose={handleMenuClose}
                      anchorEl={anchorEl}
                      handleEdit={handleEdit}
                      handleDelete={handleDelete}
                    />
                  ))}
              </div>

              <div className="mt-3">
                {UpcomingPentestData?.total > 1 && (
                  <Stack spacing={2}>
                    <Pagination
                      count={UpcomingPentestData?.total}
                      variant="outlined"
                      onChange={handleUpcomingPageNumber}
                      color="primary"
                      page={upcomingPageNumber}
                    />
                  </Stack>
                )}
              </div>
            </div>
          )}
        </div>

        <span className="text-gray-600 font-medium text-xl mt-20">
          COMPLETED PENTESTS
        </span>
        <div>
          {isCompletedLoading ? (
            <PentestLoader />
          ) : (
            <div>
              <div className="flex justify-between items-center py-3 ">
                <div className="grid grid-cols-12 gap-x-14 justify-between items-center ">
                  <span className="text-orange-cus-1 text-xl font-medium col-span-3  text-center">
                    Pentest Title
                  </span>
                  <span className="text-orange-cus-1 text-base col-span-3 text-center  ">
                    StartDate
                  </span>
                  <span className="text-orange-cus-1 text-base col-span-3 text-center">
                    End Date
                  </span>
                  <span className="text-orange-cus-1 font-semibold text-lg col-span-3  text-center ml-3">
                    Asset
                  </span>
                </div>
                <div></div>
              </div>
              {completedPentestData?.data &&
                completedPentestData?.data.map((item) => (
                  <CompletedListItem key={item._id} item={item} />
                ))}
              <div className="mt-3 mb-3">
                {completedPentestData?.total > 1 && (
                  <Stack spacing={2}>
                    <Pagination
                      count={completedPentestData?.total}
                      variant="outlined"
                      color="primary"
                      page={completedPageNumber}
                      onChange={handleCompletedPageNumber}
                    />
                  </Stack>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
      <AddPentestModal
        addPentest={addPentest}
        pentest={pentest}
        handleClose={handleClose}
        handlePentestChange={handlePentestChange}
        handleStartDate={handleStartDate}
        handleEndDate={handleEndDate}
        isEdit={isEdit}
        handlePentestSubmit={handlePentestSubmit}
      />
    </>
  );
};

export default PentestList;
