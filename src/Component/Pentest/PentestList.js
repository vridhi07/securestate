import { useState, useEffect } from "react";
import AddIcon from "@mui/icons-material/Add";
import AddPentestModal from "./AddPentestModal";
import PentestLIstItem from "./PentestLIstItem";
import { MenuItem, InputLabel, Select, FormControl } from "@mui/material";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import PentestLoader from "../../Component/Common/PentestLoader";
import * as action from "../../Redux/action";
import { useDispatch, useSelector } from "react-redux";
import DeleModal from "../Common/DeleteModal";
import * as roles from "../../constantData/Roles";
const PentestList = () => {
  // States
  const [addPentest, setAddPentest] = useState(false);
  const [activePageNumber, setActivePageNumber] = useState(1);
  const [isEdit, setIsEdit] = useState(false);
  const [selectedId, setSelectedId] = useState(null);
  const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);
  // const [statusType, setPentestSatusType] = useState("");
  // const [anchorEl, setAnchorEl] = useState(null);
  const dispatch = useDispatch();
  const [pentest, setPentest] = useState({
    title: "",
    asset: "",
    startDate: new Date(),
    endDate: new Date(),
    status: "",
    testingEnvironment: "",
    clientPoc: "",
    clientEmail: "",
    scope: "",
  });
  const [pentestStatus, setPentestStatus] = useState("active");
  // *redux state
  const { pentestData, isActiveLoading, PentestMessage } = useSelector(
    (state) => state?.Pentest
  );

  const { selectedCompany } = useSelector((state) => state?.company);
  const { userDetails, userRole } = useSelector((state) => state?.user);
  // * Functions

  const getCompanyId = (role) => {
    if (role === "superAdmin") {
      return selectedCompany;
    }
    return userDetails?.company_id._id;
  };

  //* COMPANY ID
  const company_id = getCompanyId(userRole);

  const Access = roles.handleClientAccess(userRole);

  // console.log(Access);

  // console.log(company_id);
  const handleClose = () => {
    setAddPentest(false);
    setIsEdit(false);
    setSelectedId(null);
    setPentest({
      ...pentest,
      title: "",
      asset: "",
      startDate: new Date(),
      endDate: new Date(),
      status: "",
      testingEnvironment: "",
      clientPoc: "",
      clientEmail: "",
      scope: "",
    });
  };

  const handlePentestChange = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    setPentest({ ...pentest, [name]: value });
  };
  const handleStartDate = (newValue) => {
    setPentest({ ...pentest, startDate: newValue });
  };

  const handleEndDate = (newValue) => {
    setPentest({ ...pentest, endDate: newValue });
  };

  const handleActivePageNumber = (e, i) => {
    setActivePageNumber(i);
  };

  // const openMenuButton = (e, id) => {
  //   setAnchorEl(e.currentTarget);
  // };

  // const handleMenuClose = () => {
  //   setAnchorEl(null);
  // };

  const handleEdit = (id) => {
    const SingleAsset = pentestData?.data.find((item) => item._id === id);

    // handleMenuClose();

    // console.log(SingleAsset);
    setPentest({
      ...pentest,
      title: SingleAsset.title,
      asset: SingleAsset.asset?._id,
      startDate: new Date(SingleAsset.start_date),
      endDate: new Date(SingleAsset.end_date),
      status: SingleAsset.status,
      testingEnvironment: SingleAsset.testing_env,
      clientPoc: SingleAsset.client_poc,
      clientEmail: SingleAsset.client_email,
      scope: SingleAsset.scopeType,
    });
    setAddPentest(true);
    setIsEdit(true);
    setSelectedId(id);
  };

  const handlePentestSubmit = (e) => {
    e.preventDefault();
    const {
      title,
      asset,
      startDate,
      endDate,
      status,
      testingEnvironment,
      clientPoc,
      clientEmail,
      scope,
    } = pentest;
    if (!isEdit) {
      const data = {
        title,
        asset,
        start_date: startDate,
        end_date: endDate,
        testing_env: testingEnvironment,
        client_poc: clientPoc,
        client_email: clientEmail,
        scopeType: scope,
        status,
        company_id,
      };
      console.log(data);
      dispatch(action.AddPentestRequest(data));
    }
    if (isEdit) {
      const data = {
        id: selectedId,
        title,
        asset,
        start_date: startDate,
        end_date: endDate,
        testing_env: testingEnvironment,
        client_poc: clientPoc,
        client_email: clientEmail,
        scopeType: scope,
        status,
      };

      dispatch(action.updatePentestRequest(data));

      setIsEdit(false);
    }

    setAddPentest(false);
    setPentest({
      ...pentest,
      title: "",
      asset: "",
      startDate: new Date(),
      endDate: new Date(),
      status: "",
      testingEnvironment: "",
      clientPoc: "",
      clientEmail: "",
      scope: "",
    });
  };
  const openDeleteModal = (id) => {
    setDeleteModalOpen(true);
    setSelectedId(id);
    // handleMenuClose();
  };

  const closeDeleteModal = () => {
    setDeleteModalOpen(false);
    setSelectedId(null);
  };
  const handleDelete = () => {
    dispatch(action.DeletePentestRequest(selectedId));
    closeDeleteModal();
  };

  useEffect(() => {
    dispatch(
      action.PentestRequest({ company_id, activePageNumber, pentestStatus })
    );
  }, [pentestStatus, activePageNumber, PentestMessage, company_id]);
  useEffect(() => {
    setActivePageNumber(1);
  }, [pentestStatus]);
  return (
    <div>
      <div className="mx-auto mt-20 flex w-full flex-col justify-center xl:w-5/6">
        <div className="mb-4 flex w-full flex-col items-center justify-between sm:flex-row ">
          <div>
            <h2 className="text-3xl capitalize  tracking-wide text-orange-cus-1">
              {pentestStatus} pentest
            </h2>
          </div>
          <div className="flex items-center">
            <div className=" mr-3  xs:w-[200px]">
              <FormControl fullWidth>
                <InputLabel id="demo-simple-select-label">Status</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  label="Filter"
                  value={pentestStatus}
                  onChange={(e) => setPentestStatus(e.target.value)}
                  required
                  size="small"
                >
                  <MenuItem value={"progress"}>progress</MenuItem>
                  <MenuItem value={"scheduled"}>scheduled</MenuItem>
                  <MenuItem value={"completed"}>completed</MenuItem>
                  <MenuItem value={"active"}>active</MenuItem>
                  <MenuItem value={"upcoming"}>upcoming</MenuItem>
                  <MenuItem value={"on_hold"}>on Hold</MenuItem>
                  <MenuItem value={"fix_verification"}>
                    fix Verification
                  </MenuItem>
                </Select>
              </FormControl>
            </div>
            {Access && (
              <div>
                <button
                  onClick={() => setAddPentest(true)}
                  text={"New Pentest"}
                  className={`hover rounded-md   bg-gray-cus py-2 px-5 capitalize tracking-wide text-white`}
                >
                  <span className="mr-1">
                    <AddIcon />
                  </span>
                  New Pentest
                </button>
              </div>
            )}
          </div>
        </div>
        <div>
          {isActiveLoading ? (
            <PentestLoader />
          ) : (
            <div className="min-w-[400px]" sx={{ maxwidth: "100%" }}>
              <div className="grid grid-cols-12    border-b-2 border-b-orange-cus-1 ">
                <span className="col-span-3 text-center text-xl font-medium text-orange-cus-1">
                  Pentest Title
                </span>
                <span className="col-span-2 text-center text-base text-orange-cus-1">
                  Start Date
                </span>

                <span className="col-span-2 text-center text-base text-orange-cus-1 ">
                  End Date
                </span>
                <span className="col-span-2 text-center text-lg font-semibold  text-orange-cus-1 ">
                  Asset
                </span>
                <span className="col-span-2 "></span>
                <span className="col-span-1 "></span>
              </div>
              <div className=" min-w-[500px] overflow-x-auto ">
                {pentestData.data &&
                  pentestData?.data.map((item, index) => (
                    <PentestLIstItem
                      key={item._id}
                      pentest={item}
                      // openMenuButton={openMenuButton}
                      // handleMenuClose={handleMenuClose}
                      // anchorEl={anchorEl}
                      handleEdit={handleEdit}
                      pentestStatus={pentestStatus}
                      openDeleteModal={openDeleteModal}
                      index={index}
                      Access={Access}
                    />
                  ))}
              </div>

              <div className="mt-3">
                {pentestData?.total > 1 && (
                  <Stack spacing={2}>
                    <Pagination
                      count={pentestData?.total}
                      variant="outlined"
                      onChange={handleActivePageNumber}
                      color="primary"
                      sx={{
                        "& .Mui-selected": {
                          backgroundColor: "#F27931 !important",
                          color: "white !important",
                          border: "none",
                        },
                      }}
                      page={activePageNumber}
                    />
                  </Stack>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
      <AddPentestModal
        addPentest={addPentest}
        pentest={pentest}
        handleClose={handleClose}
        handlePentestChange={handlePentestChange}
        handleStartDate={handleStartDate}
        handleEndDate={handleEndDate}
        isEdit={isEdit}
        handlePentestSubmit={handlePentestSubmit}
      />
      <DeleModal
        isDeleteModalOpen={isDeleteModalOpen}
        closeDeleteModal={closeDeleteModal}
        handleDelete={handleDelete}
      />
    </div>
  );
};

export default PentestList;
