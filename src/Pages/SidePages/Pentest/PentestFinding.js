import React, { useState, useEffect } from "react";
import SearchIcon from "@mui/icons-material/Search";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import DarkGrayButton from "../../../Component/Common/DarkGrayButton";
import PentestFindingTitle from "../../../Component/Pentest/PentestFindingTitle";
import FindingMOdal from "../../../Component/Pentest/FindingModal";
import { useSelector, useDispatch } from "react-redux";
import * as action from "../../../Redux/action";
import { useLocation } from "react-router-dom";
import DeleteModal from "../../../Component/Common/DeleteModal";

const PentestFinding = () => {
  const [findingFilter, setFindingFilter] = useState("");
  const [findingSearch, setFindingSearch] = useState("");
  const [isEdit, setIsEdit] = useState(false);
  const [isFindingModalOpen, setIsFindingModalOpen] = useState(false);
  const [findingForm, setFindingForm] = useState({
    findingTitle: "",
    status: "",
    severity: "",
    risk: "",
    complexity: "",
    CVSSscore: "",
    findingDetails: "",
    findingRecommendation: "",
  });
  const [files, setFiles] = useState("");
  const [findingData, setFindingData] = useState([]);
  const [seletedId, setSelectedId] = useState(null);
  const [expanded, setExpanded] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  //  isDeleteModalOpen,
  // closeDeleteModal,
  // handleDelete,

  const handleChange = (panel) => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false);
  };
  // *REDUX
  const dispatch = useDispatch();
  const { findings } = useSelector((state) => state?.pentestTab);
  let ArrayLength = findings && findings.length;
  // * React router Info

  const location = useLocation();
  // console.log(location);
  const pentestId = location?.state?.id;
  // console.log(pentestId);
  // * Functions
  const handleFindingFormChange = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    if (name === "CVSSscore") {
      let min = 0;
      let max = 100;
      if (value > max) value = max;
      if (value < min) value = min;
    }

    setFindingForm({ ...findingForm, [name]: value });
  };
  const handleFindingEdit = (id) => {
    let singleData = findingData.find((item) => item._id === id);
    setFindingForm({
      ...findingForm,
      findingTitle: singleData.title,
      status: singleData.status,
      severity: singleData.severity,
      risk: singleData.risk,
      complexity: singleData.complexity,
      CVSSscore: singleData.cvss,
      findingDetails: singleData.details,
      findingRecommendation: singleData.recommendation,
    });
    console.log(singleData);
    setExpanded(false);
    console.log(id);
    setSelectedId(id);

    setIsEdit(true);
    setIsFindingModalOpen(true);
  };

  const handleClickOpen = () => {
    setIsFindingModalOpen(true);
  };

  const handleClose = () => {
    setIsFindingModalOpen(false);

    setFindingForm({
      ...findingForm,
      findingTitle: "",
      status: "",
      severity: "",
      risk: "",
      complexity: "",
      CVSSscore: "",
      findingDetails: "",
      findingRecommendation: "",
    });
    if (isEdit) {
      setTimeout(() => {
        setIsEdit(false);
      }, 1000);
    }
  };

  const openDeleteModal = (id) => {
    setIsDeleteModalOpen(true);
    // console.log(id);
    setSelectedId(id);
    handleClose();
    if (expanded) {
      setExpanded(false);
    }
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    const {
      findingTitle,
      status,
      severity,
      risk,
      complexity,
      CVSSscore,
      findingDetails,
      findingRecommendation,
    } = findingForm;
    if (isEdit) {
      let data = new FormData();
      data.append("status", status);
      data.append("severity", severity);
      data.append("risk", risk);
      data.append("complexity", complexity);
      data.append("cvss", CVSSscore);
      data.append("details", findingDetails);
      data.append("recommendation", findingRecommendation);
      data.append("title", findingTitle);
      if (files) {
        data.append("file", files, files.name);
      }
      dispatch(action.updateFindingsRequest({ data, pentestId, seletedId }));
    }
    if (!isEdit) {
      let data = new FormData();
      data.append("status", status);
      data.append("severity", severity);
      data.append("risk", risk);
      data.append("complexity", complexity);
      data.append("cvss", CVSSscore);
      data.append("details", findingDetails);
      data.append("recommendation", findingRecommendation);
      data.append("title", findingTitle);
      console.log("add");
      if (files) {
        data.append("file", files, files.name);
      }
      dispatch(action.addFindingsRequest({ data, pentestId }));
    }
    handleClose();
    setFiles("");
  };
  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedId(null);
  };
  const handleDelete = () => {
    console.log("delete");
    dispatch(action.deleteFindingsRequest({ pentestId, seletedId }));
    closeDeleteModal();
  };
  const getFilterData = (data, filterOption, searchOption) => {
    let newData = [...data];

    if (filterOption === "Severity") {
      // console.log("I was called");
      newData = newData.sort((a, b) => {
        return a.complexity.localeCompare(b.complexity);
      });
    }
    if (searchOption) {
      newData = newData.filter((item) => {
        return item.title.toLowerCase().startsWith(searchOption);
      });
    }
    return newData;
  };

  let filterData;
  if (findings) {
    filterData = getFilterData(findingData, findingFilter, findingSearch);
  }
  // console.log(filterData);
  useEffect(() => {
    if (findings) {
      setFindingData([...findings]);
    }
  }, [findings]);

  return (
    <div className="flex flex-col items-center  w-full ">
      <section className="w-full flex flex-col lg:flex-row lg:justify-between lg:items-center my-6 ">
        <form className="grid justify-center items-center">
          <div
            className="flex justify-end items-center border border-gray-600 
          py-0.5 pr-2 rounded-3xl
          "
          >
            <SearchIcon sx={{ ml: "0.5rem", mt: "0.2rem" }} />
            <input
              type="search"
              className="py-1 px-1 focus:outline-none bg-clip-padding placeholder:text-gray-600"
              placeholder="Search"
              value={findingSearch}
              onChange={(e) => setFindingSearch(e.target.value)}
            />
          </div>
        </form>
        <div className="flex flex-col lg:flex-row justify-center items-center mt-3 lg:mt-0">
          <form className="min-w-[16rem] lg:min-w-[13rem]">
            <FormControl fullWidth size="small">
              <InputLabel id="findingFilter">filter</InputLabel>
              <Select
                labelId="findingFilter"
                id="findingFilter"
                value={findingFilter}
                label="filter"
                onChange={(e) => setFindingFilter(e.target.value)}
              >
                <MenuItem value={"Severity"}>Severity</MenuItem>
                <MenuItem value={"Risk"}>Risk</MenuItem>
                <MenuItem value={"Complexity"}>Complexity</MenuItem>
                <MenuItem value={"Status"}>Status</MenuItem>
              </Select>
            </FormControl>
          </form>
          <div className="lg:ml-3 mt-3 lg:mt-0">
            <DarkGrayButton
              onClick={handleClickOpen}
              className={"px-[4.8rem] lg:px-[3rem]"}
            >
              Add Findings
            </DarkGrayButton>
          </div>
        </div>
      </section>
      <section className="flex w-full flex-col pb-12">
        {filterData && filterData.length === 0 ? (
          <div className="text-center flex justify-center items-center w-full mt-10">
            <h4 className="capitalize text-lg">no data found</h4>
          </div>
        ) : (
          filterData.map((item, index) => {
            return (
              <PentestFindingTitle
                key={item._id}
                index={index}
                item={item}
                handleFindingEdit={handleFindingEdit}
                expanded={expanded}
                handleChange={handleChange}
                openDeleteModal={openDeleteModal}
              />
            );
          })
        )}
      </section>
      <FindingMOdal
        handleClose={handleClose}
        isFindingModalOpen={isFindingModalOpen}
        isEdit={isEdit}
        handleFindingFormChange={handleFindingFormChange}
        findingForm={findingForm}
        files={files}
        setFiles={setFiles}
        handleSubmit={handleSubmit}
        ArrayLength={ArrayLength}
      />
      <DeleteModal
        isDeleteModalOpen={isDeleteModalOpen}
        closeDeleteModal={closeDeleteModal}
        handleDelete={handleDelete}
      />
    </div>
  );
};

export default PentestFinding;
