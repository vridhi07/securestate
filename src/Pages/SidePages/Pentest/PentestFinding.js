import React, { useState } from "react";
import SearchIcon from "@mui/icons-material/Search";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import DarkGrayButton from "../../../Component/Common/DarkGrayButton";
import PentestFindingTitle from "../../../Component/Pentest/PentestFindingTitle";
import FindingMOdal from "../../../Component/Pentest/FindingModal";
const PentestFinding = () => {
  const [findingFilter, setFindingFilter] = useState("");
  const [findingSearch, setFindingSearch] = useState("");
  const [isEdit, setIsEdit] = useState(false);
  const [isFindingModalOpen, setIsFindingModalOpen] = useState(false);
  const [findingForm, setFindingForm] = useState({
    findingTitle: "",
    status: "",
    severity: "",
    risk: "",
    complexity: "",
    CVSSscore: "",
    findingDetails: "",
    findingRecommendation: "",
  });
  const handleFindingFormChange = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    setFindingForm({ ...findingForm, [name]: value });
  };
  const handleFindingEdit = (id) => {
    console.log(id);
    setIsEdit(true);
    setIsFindingModalOpen(true);
  };

  const handleClickOpen = () => {
    setIsFindingModalOpen(true);
  };

  const handleClose = () => {
    setIsFindingModalOpen(false);

    setFindingForm({
      ...findingForm,
      findingTitle: "",
      status: "",
      severity: "",
      risk: "",
      complexity: "",
      CVSSscore: "",
      findingDetails: "",
      findingRecommendation: "",
    });
    if (isEdit) {
      setTimeout(() => {
        setIsEdit(false);
      }, 1000);
    }
  };
  return (
    <div className="flex flex-col items-center  w-full ">
      <section className="w-full flex flex-col lg:flex-row lg:justify-between lg:items-center my-6 ">
        <form className="grid justify-center items-center">
          <div
            className="flex justify-end items-center border border-gray-600 
          py-0.5 pr-2 rounded-3xl
          "
          >
            <SearchIcon sx={{ ml: "0.5rem", mt: "0.2rem" }} />
            <input
              type="search"
              className="py-1 px-1 focus:outline-none bg-clip-padding placeholder:text-gray-600"
              placeholder="Search"
              value={findingSearch}
              onChange={(e) => setFindingSearch(e.target.value)}
            />
          </div>
        </form>
        <div className="flex flex-col lg:flex-row justify-center items-center mt-3 lg:mt-0">
          <form className="min-w-[16rem] lg:min-w-[13rem]">
            <FormControl fullWidth size="small">
              <InputLabel id="findingFilter">filter</InputLabel>
              <Select
                labelId="findingFilter"
                id="findingFilter"
                value={findingFilter}
                label="filter"
                onChange={(e) => setFindingFilter(e.target.value)}
              >
                <MenuItem value={"Severity"}>Severity</MenuItem>
                <MenuItem value={"Risk"}>Risk</MenuItem>
                <MenuItem value={"Complexity"}>Complexity</MenuItem>
                <MenuItem value={"Status"}>Status</MenuItem>
              </Select>
            </FormControl>
          </form>
          <div className="lg:ml-3 mt-3 lg:mt-0">
            <DarkGrayButton
              onClick={handleClickOpen}
              className={"px-[4.8rem] lg:px-[3rem]"}
            >
              Add Findings
            </DarkGrayButton>
          </div>
        </div>
      </section>
      <section className="flex w-full flex-col">
        {[1, 2, 3, 4].map((item, index) => {
          return (
            <PentestFindingTitle
              key={index}
              index={index}
              handleFindingEdit={handleFindingEdit}
            />
          );
        })}
      </section>
      <FindingMOdal
        handleClose={handleClose}
        isFindingModalOpen={isFindingModalOpen}
        isEdit={isEdit}
        handleFindingFormChange={handleFindingFormChange}
        findingForm={findingForm}
      />
    </div>
  );
};

export default PentestFinding;
