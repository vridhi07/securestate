import React, { useState } from "react";

import ScopeAddandEditForm from "../../../Component/Pentest/ScopeAddandEditForm";

import PentestScopeList from "../../../Component/Pentest/PentestScopeList";
import { useLocation } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import DeleteModal from "../../../Component/Common/DeleteModal";
import * as action from "../../../Redux/action";
import CircularProgress from "@mui/material/CircularProgress";
const PentestScope = () => {
  const dispatch = useDispatch();
  const location = useLocation();

  const pentestId = location?.state?.id;
  // console.log(pentestId);
  const [isEdit, setIsEdit] = useState(false);
  const [selectedId, setSelectedId] = useState(null);
  const [isScopeModal, setIsScopeModal] = useState(false);
  const [scopeForm, setScopeForm] = useState({
    scopeTitle: "",
    scopeStatus: "",
  });
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(false);

  const { Scope, AssetType } = useSelector((state) => state?.pentestTab);
  const { isLoading } = useSelector((state) => state?.scope);
  // console.log(Scope);

  const openFormModal = () => {
    setIsScopeModal(true);
  };

  const closeFormModal = () => {
    setIsScopeModal(false);
    if (isEdit) {
      setTimeout(() => {
        // console.log("i was called");
        setIsEdit(false);
      }, 1000);
    }
  };

  const openMenuPopOver = (e, id) => {
    setAnchorEl(e.currentTarget);
    console.log(id);
    setSelectedId(id);
  };

  const closeMenuPopOver = (e) => {
    setAnchorEl(null);
  };
  const openEditModal = () => {
    let singleData = Scope.find((item) => item._id === selectedId);

    setScopeForm({
      ...scopeForm,
      scopeTitle: singleData.title,
      scopeStatus: singleData.status,
    });
    setIsEdit(true);
    setIsScopeModal(true);
    closeMenuPopOver();
  };

  const openDeleteModal = () => {
    setIsDeleteModalOpen(true);
    closeMenuPopOver();
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedId(null);
  };
  const handleDelete = () => {
    console.log("deleted");
    dispatch(action.deleteScopeRequest({ pentestId, selectedId }));
    closeDeleteModal();
  };
  const handleScopeForm = (e) => {
    let name = e.target.name;
    let value = e.target.value;
    setScopeForm({ ...scopeForm, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!isEdit) {
      console.log("add");
      const data = {
        title: scopeForm.scopeTitle,
        status: scopeForm.scopeStatus,
      };
      dispatch(action.addScopeRequest({ pentestId, data }));
    }
    if (isEdit) {
      console.log("edit");
      const data = {
        title: scopeForm.scopeTitle,
        status: scopeForm.scopeStatus,
      };
      dispatch(action.updateScopeRequest({ pentestId, selectedId, data }));
    }
    closeFormModal();
    setScopeForm({
      ...scopeForm,
      scopeTitle: "",
      scopeStatus: "",
    });
  };
  // const loading = true;
  return (
    <div className="flex flex-col items-center   ">
      <div className="ml-auto mt-2 md:mt-0 mb-2 ">
        <button
          className="bg-[#606060] px-9 py-2 rounded-lg text-white"
          onClick={openFormModal}
          disabled={isLoading}
        >
          {isLoading ? (
            <span className="">
              <CircularProgress size={15} color="inherit"></CircularProgress>
              <span className="ml-1"> Loading...</span>
            </span>
          ) : (
            "Add"
          )}
        </button>
      </div>
      <div className="flex flex-col w-full">
        <PentestScopeList
          anchorEl={anchorEl}
          openMenuPopOver={openMenuPopOver}
          closeMenuPopOver={closeMenuPopOver}
          openEditModal={openEditModal}
          openDeleteModal={openDeleteModal}
          closeDeleteModal={closeDeleteModal}
          handleDelete={handleDelete}
          Scope={Scope}
          AssetType={AssetType}
        />
      </div>
      <ScopeAddandEditForm
        type={"add"}
        isScopeModal={isScopeModal}
        handleSubmit={handleSubmit}
        scopeForm={scopeForm}
        handleScopeForm={handleScopeForm}
        isEdit={isEdit}
        closeFormModal={closeFormModal}
      />
      <DeleteModal
        isDeleteModalOpen={isDeleteModalOpen}
        closeDeleteModal={closeDeleteModal}
        handleDelete={handleDelete}
      />
    </div>
  );
};

export default PentestScope;
